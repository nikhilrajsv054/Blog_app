
To implement a "Read more" feature in the PostList for admin users, where clicking on it allows you to access the full content of a post, you can follow these steps:

Add a "Read more" link in the PostList.js component.

Create a new component, e.g., FullPost.js, to display the full content of a post.

Implement a route using React Router to navigate to the FullPost component when clicking "Read more."

Here's how you can achieve this:

Add a "Read more" link to the PostList.js component:
jsx
Copy code
// PostList.js
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { selectPosts, likePost, commentPost, editPost } from '../store/Slices/postsSlice';
import { selectIsAdmin } from '../store/Slices/authSlice';
import { Link } from 'react-router-dom'; // Import Link from React Router
import styles from '../Styles/PostList.module.css';
import FavoriteIcon from '@material-ui/icons/Favorite';
import CommentIcon from '@material-ui/icons/Comment';

const PostList = () => {
  const posts = useSelector(selectPosts);
  const isAdmin = useSelector(selectIsAdmin);
  const dispatch = useDispatch();
  const [isEditing, setIsEditing] = useState(false);
  const [editedPost, setEditedPost] = useState({});
  const [selectedPost, setSelectedPost] = useState(null); // Add state to store the selected post for "Read more"

  const handleEdit = (post) => {
    setEditedPost({ ...post });
    setIsEditing(true);
  };

  const handleSaveEdit = () => {
    dispatch(editPost(editedPost));
    setIsEditing(false);
    setEditedPost({});
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditedPost({});
  };

  const handleLike = (postId) => {
    dispatch(likePost(postId));
  };

  const handleComment = (postId) => {
    dispatch(commentPost({ postId, comment: 'Sample comment' }));
  };

  return (
    <div className={styles['post-list']}>
      <h2>Post List</h2>
      {posts.length === 0 ? (
        <p>No posts yet.</p>
      ) : (
        posts.map((post) => (
          <div className={styles['post']} key={post.id}>
            <h3>{post.title}</h3>
            <p>{post.content}</p>
            <p className={styles['created-at']}>Created At: {post.createdAt}</p>
            <div className={styles['actions']}>
              <div className={styles['action-item']}>
                <button onClick={() => handleLike(post.id)}>
                  <FavoriteIcon /> Like
                </button>
                <span>{post.likes}</span>
              </div>
              <div className={styles['action-item']}>
                <button onClick={() => handleComment(post.id)}>
                  <CommentIcon /> Comment
                </button>
                <span>{post.comments.length}</span>
              </div>
              {isAdmin && (
                <div className={styles['action-item']}>
                  {isEditing ? (
                    <>
                      <button onClick={handleSaveEdit}>Save</button>
                      <button onClick={handleCancelEdit}>Cancel</button>
                    </>
                  ) : (
                    <>
                      <button onClick={() => handleEdit(post)}>Edit</button>
                      {/* Add "Read more" link with the post's id as a query parameter */}
                      <Link to={`/full-post/${post.id}`}>Read more</Link>
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        ))
      )}
    </div>
  );
};

export default PostList;
Create a new component, FullPost.js, to display the full content of a post:
jsx
Copy code
// FullPost.js
import React from 'react';
import { useSelector } from 'react-redux';
import { selectPosts } from '../store/Slices/postsSlice';
import { useParams } from 'react-router-dom'; // Import useParams from React Router

const FullPost = () => {
  const { postId } = useParams(); // Get the postId from the URL parameter
  const posts = useSelector(selectPosts);
  const post = posts.find((p) => p.id === Number(postId)); // Find the post with the matching id

  return (
    <div>
      <h2>Full Post</h2>
      {post ? (
        <div>
          <h3>{post.title}</h3>
          <p>{post.content}</p>
        </div>
      ) : (
        <p>Post not found.</p>
      )}
    </div>
  );
};

export default FullPost;
Set up a route in your App.js or routing configuration to navigate to the FullPost component when clicking "Read more":
jsx
Copy code
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import PostList from './components/PostList';
import PostForm from './components/PostForm';
import PrivateRoute from './components/PrivateRoute';
import Login from './components/Login';
import FullPost from './components/FullPost'; // Import the FullPost component

function App() {
  return (
    <Router>
      <div>
        {/* ... */}
        <Switch>
          <Route path="/login" component={Login} />
          {/* Add a route to display the FullPost component */}
          <Route path="/full-post/:postId" component={FullPost} />
          <Route path="/" exact component={PostList} />
          <PrivateRoute path="/add-post" component={PostForm} />
        </Switch>
      </div>
    </Router>